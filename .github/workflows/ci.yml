name: CI

on:
  push:
    branches: [master, dev]
  workflow_dispatch:


jobs:
  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]
  
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Build
      run: |
          mkdir build
          cd build
          cmake -DSHARED_WEB_FRAMEWORK=${{ matrix.shared[0] }} ..
          cmake --build . -t INSTALL -j $([Environment]::ProcessorCount) --config ${{ matrix.configuration }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Windows
        path: build/WebFrameworkLibrary


  linux-build:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DSHARED_WEB_FRAMEWORK=${{ matrix.shared[0] }} ..
          make install -j $(nproc)

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Linux
        path: build/WebFrameworkLibrary
        

  android-build:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:android
    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=android-28 -DCMAKE_TOOLCHAIN_FILE=${NDK_PATH}/build/cmake/android.toolchain.cmake ..
          make install -j $(nproc)

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Android
        path: build/WebFrameworkLibrary
  
        
  static-windows-tests:
    runs-on: windows-latest
    needs: windows-build
    strategy:
      matrix:
        configuration: [Debug, Release]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
  
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Windows
        path: WebFrameworkLibrary

    - name: Get Google Test
      uses: LazyPanda07/get-gtest@v1
      with:
        build-type: ${{ matrix.configuration }}
        install-path: Tests/gtest

    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -G "NMake Makefiles" ..
          nmake install

    - name: Tests
      working-directory: Tests
      run: |
          cd build/bin
          .\run_tests.bat ${{ matrix.config }}

    - name: Upload tests binaries
      if: ${{ matrix.config == 'multi_threaded_config.json' && matrix.configuration == 'Release' }}
      uses: actions/upload-artifact@v4
      with:
        name: Tests_Windows
        path: Tests/build/bin


  static-linux-tests:
    runs-on: ubuntu-latest
    needs: linux-build
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    strategy:
      matrix:
        configuration: [Debug, Release]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Linux
        path: WebFrameworkLibrary
        
    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ..
          make install -j $(nproc)

    - name: Tests
      working-directory: Tests
      shell: bash
      run: |
          cd build/bin
          source run_tests.sh ${{ matrix.config }}
      
    - name: Upload tests binaries
      if: ${{ matrix.config == 'multi_threaded_config.json' && matrix.configuration == 'Release' }}
      uses: actions/upload-artifact@v4
      with:
        name: Tests_Linux
        path: Tests/build/bin



  static-memory-leak-tests:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    needs: linux-build
    strategy:
      matrix:
        configuration: [Debug, Release]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Linux
        path: WebFrameworkLibrary
        
    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ..
          make install -j $(nproc)

    - name: Tests
      working-directory: Tests
      shell: bash
      run: |
          cd build/bin
          source run_memory_leak_tests.sh ${{ matrix.config }} 


  shared-windows-tests:
    runs-on: windows-latest
    needs: windows-build
    strategy:
      matrix:
        configuration: [Debug, Release]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
  
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}DLL_Windows
        path: WebFrameworkLibrary

    - name: Get Google Test
      uses: LazyPanda07/get-gtest@v1
      with:
        build-type: ${{ matrix.configuration }}
        install-path: Tests/gtest

    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -G "NMake Makefiles" ..
          nmake install

    - name: Tests
      working-directory: Tests
      run: |
          cd build/bin
          .\run_tests.bat ${{ matrix.config }}


  shared-linux-tests:
    runs-on: ubuntu-latest
    needs: linux-build
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    strategy:
      matrix:
        configuration: [Debug, Release]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}DLL_Linux
        path: WebFrameworkLibrary
        
    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ..
          make install -j $(nproc)

    - name: Tests
      working-directory: Tests
      shell: bash
      run: |
          cd build/bin
          source run_tests.sh ${{ matrix.config }}


  windows-cxx-tests:
    runs-on: windows-latest
    needs: windows-build
    strategy:
      matrix:
        configuration: [Debug, Release]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
  
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}DLL_Windows
        path: WebFrameworkLibrary

    - name: Get Google Test
      uses: LazyPanda07/get-gtest@v1
      with:
        build-type: ${{ matrix.configuration }}
        install-path: Tests/gtest

    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DCXX_API=ON -G "NMake Makefiles" ..
          nmake install

    - name: Tests
      working-directory: Tests
      run: |
          cd build/bin
          .\CXX_API.exe || exit 1
          .\run_tests.bat ${{ matrix.config }}


  linux-cxx-tests:
    runs-on: ubuntu-latest
    needs: linux-build
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    strategy:
      matrix:
        configuration: [Debug, Release]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}DLL_Linux
        path: WebFrameworkLibrary
        
    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DCXX_API=ON ..
          make install -j $(nproc)

    - name: Tests
      working-directory: Tests
      shell: bash
      run: |
          cd build/bin
          export LD_LIBRARY_PATH=$(pwd):LD_LIBRARY_PATH
          ./CXX_API
          source run_tests.sh ${{ matrix.config }}


  windows-cc-tests:
    runs-on: windows-latest
    needs: windows-build
    strategy:
      matrix:
        configuration: [Debug, Release]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
  
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}DLL_Windows
        path: WebFrameworkLibrary

    - name: Get Google Test
      uses: LazyPanda07/get-gtest@v1
      with:
        build-type: ${{ matrix.configuration }}
        install-path: Tests/gtest

    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DCXX_API=ON -DCC_API=ON -G "NMake Makefiles" ..
          nmake install

    - name: Tests
      working-directory: Tests
      run: |
          cd build/bin
          .\CC_API.exe || exit 1
          .\run_cc_tests.bat ${{ matrix.config }}


  linux-cc-tests:
    runs-on: ubuntu-latest
    needs: linux-build
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    strategy:
      matrix:
        configuration: [Debug, Release]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}DLL_Linux
        path: WebFrameworkLibrary
        
    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DCXX_API=ON -DCC_API=ON ..
          make install -j $(nproc)

    - name: Tests
      working-directory: Tests
      shell: bash
      run: |
          cd build/bin
          export LD_LIBRARY_PATH=$(pwd):LD_LIBRARY_PATH
          ./CC_API
          source run_cc_tests.sh ${{ matrix.config }}
  

  windows-python-tests:
    runs-on: windows-latest
    needs: [static-windows-tests]
    strategy:
      matrix:
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ReleaseDLL_Windows
          path: WebFrameworkLibrary

      - name: Download tests artifacts
        uses: actions/download-artifact@v4
        with:
          name: Tests_Windows
          path: TestsBinaries
        
      - name: Install Python API
        run: |
            python -m pip install pip --upgrade
            pip install setuptools
            pip install setuptools --upgrade
            pip install WebFrameworkLibrary/api/python_api/
        
      - name: Tests
        run: |
          cp WebFrameworkLibrary/dll/WebFramework.dll TestsBinaries
          cd TestsBinaries
          .\run_python_tests.bat ${{ matrix.config }}


  linux-python-tests:
    runs-on: ubuntu-latest
    needs: [static-linux-tests]
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    strategy:
      matrix:
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ReleaseDLL_Linux
          path: WebFrameworkLibrary

      - name: Download tests artifacts
        uses: actions/download-artifact@v4
        with:
          name: Tests_Linux
          path: TestsBinaries
        
      - name: Chmod
        run: |
          cd TestsBinaries
          chmod +x DefaultHTTPSServer
          chmod +x Core
          chmod +x LoadBalancerCore
          chmod +x ProxyCore

      - name: Tests
        shell: bash
        run: |
          pip3 install WebFrameworkLibrary/api/python_api/
          cp WebFrameworkLibrary/lib/libWebFramework.so TestsBinaries
          cd TestsBinaries
          source run_python_tests.sh ${{ matrix.config }}
  

  windows-csharp-tests:
    runs-on: windows-latest
    needs: windows-build
    strategy:
      matrix:
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
  
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ReleaseDLL_Windows
        path: WebFrameworkLibrary

    - name: Get Google Test
      uses: LazyPanda07/get-gtest@v1
      with:
        build-type: Release
        install-path: Tests/gtest

    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCXX_API=ON -DCSHARP_API=ON -G "NMake Makefiles" ..
          nmake install

    - name: Tests
      working-directory: Tests
      run: |
          cd build/bin
          dotnet test CSharpAPI.dll
          .\run_csharp_tests.bat ${{ matrix.config }}


  linux-csharp-tests:
    runs-on: ubuntu-latest
    needs: linux-build
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    strategy:
      matrix:
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ReleaseDLL_Linux
        path: WebFrameworkLibrary
        
    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCXX_API=ON -DCSHARP_API=ON ..
          make install -j $(nproc)

    - name: Tests
      working-directory: Tests
      shell: bash
      run: |
          cd build/bin
          export LD_LIBRARY_PATH=$(pwd):LD_LIBRARY_PATH
          dotnet test CSharpAPI.dll
          source run_csharp_tests.sh ${{ matrix.config }}


  windows-flutter-tests:
    runs-on: windows-latest
    needs: windows-build

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Flutter
      uses: subosito/flutter-action@v2.16.0
      with:
        channel: stable
        flutter-version: 3.24.0

    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0
      
    - name: Get Google Test
      uses: LazyPanda07/get-gtest@v1
      with:
        build-type: Release
        install-path: Tests/gtest

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ReleaseDLL_Windows
        path: WebFrameworkLibrary
        
    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCXX_API=ON -DFLUTTER_API=ON -G "NMake Makefiles" ..
          nmake install

    - name: Tests
      working-directory: Tests
      run: |
          cd build/bin


  publish:
    needs: [static-memory-leak-tests, windows-cxx-tests, linux-cxx-tests, windows-python-tests, linux-python-tests]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Get current branch
      uses : LazyPanda07/extract-current-branch@master
    
    - name: Setup release version variable
      shell: pwsh
      run: echo "VERSION=$($($($(Select-String -Path .\WebFramework\src\Import\WebFramework.cpp -Pattern version) -split '( = )')[3].TrimEnd(';')).Trim('\"'))" >> $Env:GITHUB_ENV

    - name: Download artifacts
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      uses: actions/download-artifact@v4
      
    - name: Setup Windows build list
      run: echo "WINDOWS_BUILD_LIST="$(ls | grep Windows)"" >> ${GITHUB_ENV}
      
    - name: Create Windows zip
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      run: zip -r windows.zip ${{ env.WINDOWS_BUILD_LIST }}

    - name: Create Linux zip
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      run: zip -r linux.zip Release_Linux ReleaseDLL_Linux

    - name: Publish Windows
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      uses: svenstaro/upload-release-action@master
      with:
        tag: v${{ env.VERSION }}
        file: windows.zip

    - name: Publish Linux
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      uses: svenstaro/upload-release-action@master
      with:
        tag: v${{ env.VERSION }}
        file: linux.zip
