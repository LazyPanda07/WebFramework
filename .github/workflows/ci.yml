name: CI

on:
  push:
    branches: [master, dev]


jobs:
  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]
  
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Build
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DSHARED_WEB_FRAMEWORK=${{ matrix.shared[0] }} -G "NMake Makefiles" ..
          nmake install

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Windows
        path: build/WebFrameworkLibrary


  linux-build:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DSHARED_WEB_FRAMEWORK=${{ matrix.shared[0] }} ..
          make install -j $(nproc)
          
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Linux
        path: build/WebFrameworkLibrary
        

  windows-tests:
    runs-on: windows-latest
    needs: windows-build
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
  
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Windows
        path: WebFrameworkLibrary

    - name: Get Google Test
      uses: LazyPanda07/get-gtest@v1
      with:
        build-type: ${{ matrix.configuration }}
        install-path: Tests/gtest

    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -G "NMake Makefiles" ..
          nmake install

    - name: Tests
      working-directory: Tests
      run: |
          cd build/bin
          .\run_tests.bat ${{ matrix.config }}


  linux-tests:
    runs-on: ubuntu-latest
    needs: linux-build
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Linux
        path: WebFrameworkLibrary
        
    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ..
          make install -j $(nproc)

    - name: Tests
      working-directory: Tests
      run: |
          cd build/bin
          ls
          source run_tests.sh ${{ matrix.config }} 


  memory-leak-tests:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    needs: linux-build
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Linux
        path: WebFrameworkLibrary
        
    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ..
          make install -j $(nproc)

    - name: Tests
      working-directory: Tests
      run: |
          cd build/bin
          ls
          source run_memory_leak_tests.sh ${{ matrix.config }} 
  

  publish:
    needs: [windows-tests, linux-tests, memory-leak-tests]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Get current branch
      uses : LazyPanda07/extract-current-branch@master
    
    - name: Setup release version variable
      shell: pwsh
      run: echo "VERSION=$($($($(Select-String -Path .\WebFramework\src\WebFramework.cpp -Pattern version) -split '( = )')[3].TrimEnd(';')).Trim('\"'))" >> $Env:GITHUB_ENV

    - name: Download artifacts
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      uses: actions/download-artifact@v4
      
    - name: Setup Windows build list
      run: echo "WINDOWS_BUILD_LIST="$(ls | grep Windows)"" >> ${GITHUB_ENV}
      
    - name: Create Windows zip
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      run: zip -r windows.zip ${{ env.WINDOWS_BUILD_LIST }}

    - name: Create Linux zip
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      run: zip -r linux.zip Release_Linux ReleaseDLL_Linux

    - name: Publish Windows
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      uses: svenstaro/upload-release-action@master
      with:
        tag: v${{ env.VERSION }}
        file: windows.zip

    - name: Publish Linux
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      uses: svenstaro/upload-release-action@master
      with:
        tag: v${{ env.VERSION }}
        file: linux.zip
