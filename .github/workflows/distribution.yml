name: Distribution


on:
  workflow_dispatch:


env:
  dotnet-version: 8.0
  deb-package-version: 1.0.0
  deb-package-release-number: 1


jobs:
  pip-package:
    runs-on: ubuntu-latest
    
    steps:
    - name: Get Linux latest release
      uses: robinraju/release-downloader@v1.11
      with:
        repository: ${{ github.repository }}
        latest: true
        extract: true
        fileName: linux.zip
        
    - name: Create package folder
      run: |
          mkdir package
          mv ReleaseDLL_Linux/api/python_api/* package/

    - name: Build wheel
      working-directory: package
      run: |
          python3 -m pip install build
          python3 -m build

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pip-package
        path: package/dist


  nuget-package:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Get Linux latest release
      uses: robinraju/release-downloader@v1.11
      with:
        repository: ${{ github.repository }}
        latest: true
        extract: true
        fileName: linux.zip

    - name: Get Windows latest release
      uses: robinraju/release-downloader@v1.11
      with:
        repository: ${{ github.repository }}
        latest: true
        extract: true
        fileName: windows.zip
        
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Copy libraries
      shell: bash
      run: |
          mv ReleaseDLL_Windows/dll/*.dll API/CSharp_API/
          mv ReleaseDLL_Linux/lib/*.so API/CSharp_API/

    - name: Create nuget package
      run: |
          cd API/CSharp_API/
          dotnet build --configuration Release
          msbuild -t:pack -p:Configuration=Release

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: API/CSharp_API/bin/Release/*.nupkg


  deb-package:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Get Linux latest release
      uses: robinraju/release-downloader@v1.11
      with:
        repository: ${{ github.repository }}
        latest: true
        extract: true
        fileName: linux.zip

    - name: Create deb package
      run: |
          mkdir -p web-framework_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework/lib
          chmod 0755 deb_packages/web-framework/DEBIAN/postinst
          cp ./LICENSE deb_packages/web-framework/DEBIAN/copyright
          mv deb_packages/web-framework/DEBIAN web-framework_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64
          cp -r ReleaseDLL_Linux/lib/*.so web-framework_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework/lib
          cp -r ReleaseDLL_Linux/WebFrameworkAssets web-framework_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework
          cp -r ReleaseDLL_Linux/localization_modules.json web-framework_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework
          dpkg --build web-framework_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64
    
    - name: Create deb dev package
      run: |
          mkdir -p web-framework-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework/lib
          mkdir -p web-framework-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework/include
          mkdir -p web-framework-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework/api/cc/include
          mkdir -p web-framework-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework/api/cxx/include
          chmod 0755 deb_packages/web-framework-dev/DEBIAN/postinst
          cp ./LICENSE deb_packages/web-framework/DEBIAN/copyright
          mv deb_packages/web-framework-dev/DEBIAN web-framework-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64
          cp -r ReleaseDLL_Linux/lib/* web-framework-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework/lib
          cp -r ReleaseDLL_Linux/include/* web-framework-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework/include
          cp -r ReleaseDLL_Linux/api/cc/include/* web-framework-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework/api/cc/include
          cp -r ReleaseDLL_Linux/api/cxx/include/* web-framework-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework/api/cxx/include
          cp -r ReleaseDLL_Linux/WebFrameworkConfig.cmake web-framework-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework
          cp -r ReleaseDLL_Linux/FindWebFramework.cmake web-framework-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework
          cp -r ReleaseDLL_Linux/WebFrameworkAssets web-framework-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework
          cp -r ReleaseDLL_Linux/localization_modules.json web-framework-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework
          dpkg --build web-framework-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64

    - name: Create deb static dev package
      run: |
          mkdir -p web-framework-static-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework/lib
          mkdir -p web-framework-static-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework/include
          chmod 0755 deb_packages/web-framework-static-dev/DEBIAN/postinst
          cp ./LICENSE deb_packages/web-framework/DEBIAN/copyright
          mv deb_packages/web-framework-static-dev/DEBIAN web-framework-static-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64
          cp -r Release_Linux/lib/* web-framework-static-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework/lib
          cp -r Release_Linux/include/* web-framework-static-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework/include
          cp -r Release_Linux/WebFrameworkConfig.cmake web-framework-static-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework
          cp -r Release_Linux/FindWebFramework.cmake web-framework-static-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework
          cp -r Release_Linux/WebFrameworkAssets web-framework-static-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework
          cp -r Release_Linux/localization_modules.json web-framework-static-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64/usr/lib/web-framework
          dpkg --build web-framework-static-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deb-packages
        path: ${{ github.workspace }}/*.deb


  flutter-package:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:android

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Get Windows latest release
      uses: robinraju/release-downloader@v1.11
      with:
        repository: ${{ github.repository }}
        latest: true
        extract: true
        fileName: windows.zip

    - name: Get Android latest release
      uses: robinraju/release-downloader@v1.11
      with:
        repository: ${{ github.repository }}
        latest: true
        extract: true
        fileName: android.zip

    - name: Copy libraries
      run: |
          mkdir -p API/web_framework_flutter_api/assets/lib/arm64-v8a
          cp -r ReleaseDLL_Windows/dll/*.dll API/web_framework_flutter_api/assets/lib
          cp -r Release_Android/lib/arm64-v8a/*.so API/web_framework_flutter_api/assets/lib/arm64-v8a

    - name: Dry run
      working-directory: API/web_framework_flutter_api
      run: |
          git config --global --add safe.directory ${FLUTTER_PATH}
          dart pub publish --dry-run

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: flutter-package
        path: API/web_framework_flutter_api


  linux-pip-package-test:
    runs-on: ubuntu-latest
    needs: [pip-package]
    container:
      image: lazypanda07/ubuntu_cxx20:24.04

    steps:
    - uses: actions/checkout@v4

    - name: Download pip package
      uses: actions/download-artifact@v4
      with:
        name: pip-package
        path: python_api

    - name: Install Python API
      shell: bash
      run: |
          export PYTHON_API_NAME=$(ls python_api | grep .whl)
          pip3 install python_api/${PYTHON_API_NAME}

    - name: Build and test
      working-directory: DistributionTests
      shell: bash
      run: |
        mkdir build
        cd build
        cmake -DTEST_PYTHON=ON .. && make install
        cd bin
        source run_python_test.sh
        diff reference.json out.json

  windows-pip-package-test:
    runs-on: windows-latest
    needs: [pip-package]
    
    steps:
    - uses: actions/checkout@v4

    - name: Download pip package
      uses: actions/download-artifact@v4
      with:
        name: pip-package
        path: python_api

    - name: Install Python API
      shell: bash
      run: |
          export PYTHON_API_NAME=$(ls python_api | grep .whl)
          pip install python_api/${PYTHON_API_NAME}

    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Build and test
      run: |
        cd DistributionTests
        mkdir build
        cd build
        cmake -DTEST_PYTHON=ON -G "NMake Makefiles" .. && nmake install
        cd bin
        .\run_python_test.bat
        Compare-Object (Get-Content reference.json) (Get-Content out.json)

  
  dev-deb-package-test:
    runs-on: ubuntu-24.04
    needs: [deb-package]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download deb packages
      uses: actions/download-artifact@v4
      with:
        name: deb-packages
        path: packages

    - name: Install deb package
      run: |
          cd packages
          sudo apt install -y ./web-framework-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64.deb
      
    - name: Build test
      working-directory: DistributionTests
      run: |
          mkdir build
          cd build
          cmake -DTEST_DEV_CC=ON .. && make install -j $(nproc)

    - name: Run test
      working-directory: DistributionTests/build/bin
      run: |
          source run_cc_test.sh
          diff reference.json out.json
          
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: |
            DistributionTests/build/bin/libhello_executor.so
            DistributionTests/build/bin/cc_test
            DistributionTests/build/bin/config.json
            DistributionTests/build/bin/web.json
            DistributionTests/build/bin/reference.json


  static-dev-deb-package-test:
    runs-on: ubuntu-24.04
    needs: [deb-package]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download deb packages
      uses: actions/download-artifact@v4
      with:
        name: deb-packages
        path: packages

    - name: Install deb package
      run: |
          cd packages
          sudo apt install -y ./web-framework-static-dev_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64.deb
      
    - name: Build test
      working-directory: DistributionTests
      run: |
          mkdir build
          cd build
          cmake -DTEST_STATIC_DEV_CXX=ON .. && make install -j $(nproc)

    - name: Build hello_executor
      working-directory: samples
      run: |
          mkdir build
          cd build
          cmake -DPYTHON_SAMPLE=OFF -DCXX_SAMPLE=OFF -DCC_SAMPLE=OFF -DCSHARP_SAMPLE=OFF -DWEB_FRAMEWORK_SDK=/usr/lib/web-framework -DWEB_FRAMEWORK_DIRECTORY=/usr/lib/web-framework .. && make install -j $(nproc)
          cd bin
          mv executors/libhello_executor.so ../../../DistributionTests/build/bin

    - name: Run test
      working-directory: DistributionTests/build/bin
      run: |
          source run_cxx_test.sh
          diff reference.json out.json


  deb-package-test:
    runs-on: ubuntu-24.04
    needs: [dev-deb-package-test]

    steps:
    - name: Download deb packages
      uses: actions/download-artifact@v4
      with:
        name: deb-packages
        path: packages

    - name: Install deb package
      run: |
          cd packages
          sudo apt install -y ./web-framework_${{ env.deb-package-version }}-${{ env.deb-package-release-number }}_amd64.deb

    - name: Download binaries
      uses: actions/download-artifact@v4
      with:
        name: binaries

    - name: Run test
      run: |
        chmod +x cc_test
        ./cc_test & sleep 1
        curl http://127.0.0.1:8080 > out.json
        md5sum reference.json
        md5sum out.json
        diff reference.json out.json
      
  
  nuget-package-test:
    needs: [nuget-package]
    strategy:
      matrix:
        os: [[ubuntu-24.04, run_csharp_test.sh, "source "], [windows-latest, run_csharp_test.bat, ".\\"]]
    runs-on: ${{ matrix.os[0] }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download nuget package
      uses: actions/download-artifact@v4
      with:
        name: nuget-package

    - name: Build test
      working-directory: DistributionTests
      run: |
          mkdir build
          cd build
          cmake -DTEST_CSHARP=ON .. && cmake --build . && cmake --install .
          cd bin
          ${{ matrix.os[2] }}${{ matrix.os[1] }}


  publish-nuget-package:
    runs-on: ubuntu-latest
    needs: [
      linux-pip-package-test,
      windows-pip-package-test,
      nuget-package-test,
      deb-package-test,
      static-dev-deb-package-test,
      dev-deb-package-test
    ]

    steps:
    - name: Download nuget package
      uses: actions/download-artifact@v4
      with:
        name: nuget-package

    - name: Publish
      if: false
      run: dotnet nuget push *.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

  publish-pip-package:
    runs-on: ubuntu-latest
    needs: [
      linux-pip-package-test,
      windows-pip-package-test,
      nuget-package-test,
      deb-package-test,
      static-dev-deb-package-test,
      dev-deb-package-test
    ]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download pip package
      uses: actions/download-artifact@v4
      with:
        name: pip-package
        path: dist

    - name: Prepare
      run: python3 -m pip install twine
      
    - name: Publish
      if: false
      run: |
          export TWINE_USERNAME="__token__"
          export TWINE_PASSWORD="${{ secrets.PYPI_API_KEY }}"
          twine check dist/*
          twine upload dist/*

  publish-deb-packages:
    runs-on: ubuntu-latest
    needs: [
      linux-pip-package-test,
      windows-pip-package-test,
      nuget-package-test,
      deb-package-test,
      static-dev-deb-package-test,
      dev-deb-package-test
    ]
    env:
      EMAIL: semengricenko@gmail.com

    steps:
    - uses: actions/checkout@v4
      with:
        repository: LazyPanda07/web_framework_ppa

    - name: Download deb packages
      uses: actions/download-artifact@v4
      with:
        name: deb-packages

    - name: Setup git config
      run: |
          git config --global user.name "Github Actions"
          git config --global user.email "<>"
        
    - name: Publish
      run: |
          dpkg-scanpackages --multiversion . > Packages
          gzip -k -f Packages
          
          apt-ftparchive release . > Release
          gpg --default-key "${{ env.EMAIL }}" -abs -o - Release > Release.gpg
          gpg --default-key "${{ env.EMAIL }}" --clearsign -o - Release > InRelease

          git add .
          git commit -m "Update deb packages"
          git push
          