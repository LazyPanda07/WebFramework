name: Samples


on:
  push:
    branches: [master, dev]
  
  
env:
  flutter-version: 3.35.3


permissions:
  contents: write


jobs:
  windows-visual-studio-build:
   runs-on: windows-latest

   steps:
   - uses: actions/checkout@v4
     with:
       submodules: recursive
   
   - name: Setup MSBuild
     uses: microsoft/setup-msbuild@v2

   - name: Build VisualStudioSample
     run: |
         cd samples\VisualStudioSample
         msbuild VisualStudioSample.sln -property:Configuration=Release


  windows-build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Build WebFramework
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}\WebFrameworkLibrary -G "Ninja" ..
          cmake --build . -j
          cmake --install .

    - name: Build samples
      run: |
          cd samples
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -G "Ninja" ..
          cmake --build . -j
          cmake --install .

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Windows
        path: samples/build/bin


  windows-hello-executor:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Build WebFramework
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}\WebFrameworkLibrary -G "Ninja" ..
          cmake --build . -j
          cmake --install .

    - name: Build samples
      run: |
          cd samples
          mkdir build
          cd build
          cmake -DPYTHON_SAMPLE=OFF -DCXX_SAMPLE=OFF -DCC_SAMPLE=OFF -DCSHARP_SAMPLE=OFF -DCMAKE_BUILD_TYPE=Release -G "Ninja" ..
          cmake --build . -j
          cmake --install .

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: HelloExecutorWindows
        path: samples/build/bin/executors/*.dll
            
        
  linux-build:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:24.04

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build WebFramework
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../WebFrameworkLibrary ..
          make install -j $(nproc)

    - name: Build samples
      run: |
          cd samples
          mkdir build
          cd build
          cmake ..
          make install -j $(nproc)

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Linux
        path: samples/build/bin


  linux-hello-executor:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:24.04

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build WebFramework
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../WebFrameworkLibrary ..
          make install -j $(nproc)

    - name: Build samples
      run: |
          cd samples
          mkdir build
          cd build
          cmake -DPYTHON_SAMPLE=OFF -DCXX_SAMPLE=OFF -DCC_SAMPLE=OFF -DCSHARP_SAMPLE=OFF -DCMAKE_BUILD_TYPE=Release ..
          make install -j $(nproc)

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: HelloExecutorLinux
        path: samples/build/bin/executors/*.so


  android-build:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:android

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build WebFramework
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=../WebFrameworkLibrary -DCMAKE_BUILD_TYPE=Release ${ANDROID_CMAKE_BUILD_ARGUMENTS} ..
          make install -j $(nproc)

    - name: Build samples
      run: |
          cd samples
          mkdir build
          cd build
          cmake -DPYTHON_SAMPLE=OFF -DCXX_SAMPLE=OFF -DCC_SAMPLE=OFF -DCSHARP_SAMPLE=OFF -DCMAKE_BUILD_TYPE=Release ${ANDROID_CMAKE_BUILD_ARGUMENTS} ..
          make install -j $(nproc)

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Android
        path: samples/build/bin


  android-hello-executor:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:android

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build WebFramework
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=../WebFrameworkLibrary -DCMAKE_BUILD_TYPE=Release ${ANDROID_CMAKE_BUILD_ARGUMENTS} ..
          make install -j $(nproc)

    - name: Build samples
      run: |
          cd samples
          mkdir build
          cd build
          cmake -DPYTHON_SAMPLE=OFF -DCXX_SAMPLE=OFF -DCC_SAMPLE=OFF -DCSHARP_SAMPLE=OFF -DCMAKE_BUILD_TYPE=Release ${ANDROID_CMAKE_BUILD_ARGUMENTS} ..
          make install -j $(nproc)

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: HelloExecutorAndroid
        path: samples/build/bin/executors/*.so


  windows-flutter-build:
    runs-on: windows-latest
    needs: windows-build

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Flutter
      uses: subosito/flutter-action@v2.16.0
      with:
        channel: stable
        flutter-version: ${{ env.flutter-version }}

    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0
      
    - name: Download assets
      uses: actions/download-artifact@v4
      with:
        name: Windows
        path: Windows

    - name: Move assets
      shell: bash
      run: |
          mkdir -p API/web_framework_flutter_api/example/assets/configs
          mkdir -p API/web_framework_flutter_api/example/assets/executors
          mv Windows/configs/*.json API/web_framework_flutter_api/example/assets/configs
          mv Windows/executors/*.* API/web_framework_flutter_api/example/assets/executors

    - name: Build
      working-directory: API/web_framework_flutter_api/example
      shell: bash
      run: flutter build windows --release

    - name: Move WebFramework
      shell: bash
      run: mv Windows/*.dll API/web_framework_flutter_api/example/build/windows/x64/runner/Release/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: WindowsFlutterSample
        path: API/web_framework_flutter_api/example/build/windows/x64/runner/Release/

        
  android-flutter-build:
    runs-on: ubuntu-latest
    needs: android-build
    container:
      image: lazypanda07/ubuntu_cxx20:android

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download executors
      uses: actions/download-artifact@v4
      with:
        name: Android
        path: Android

    - name: Move assets
      run: |
          mkdir -p API/web_framework_flutter_api/example/assets/configs
          mkdir -p API/web_framework_flutter_api/example/assets/executors
          mv Android/configs/*.json API/web_framework_flutter_api/example/assets/configs
          mv Android/executors/*.* API/web_framework_flutter_api/example/assets/executors

    - name: Move WebFramework
      run: |
          mkdir -p API/web_framework_flutter_api/example/assets/lib/arm64-v8a
          mv Android/*.so API/web_framework_flutter_api/example/assets/lib/arm64-v8a

    - name: Build
      working-directory: API/web_framework_flutter_api/example
      run: flutter build apk --release --split-per-abi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: AndroidFlutterSample
        path: API/web_framework_flutter_api/example/build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
        
        
  windows-tests:
    runs-on: windows-latest
    strategy:
      matrix:
        api: ["cxx", "cc", "csharp", "python"]  

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Build WebFramework
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}\WebFrameworkLibrary -G "Ninja" ..
          cmake --build . -j
          cmake --install .

    - name: Build samples
      run: |
          cd samples
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -G "Ninja" ..
          cmake --build . -j
          cmake --install .

    - name: Install Python API
      if: ${{ matrix.api == 'python' }}
      run: pip install WebFrameworkLibrary/api/python_api/

    - name: Run samples
      working-directory: samples/build/bin
      run: |
          if ("${{ matrix.api }}" -eq "cxx") { start hello_cpp.exe }
          if ("${{ matrix.api }}" -eq "cc") { start hello_c.exe }
          if ("${{ matrix.api }}" -eq "csharp") { start hello_csharp.exe }
          if ("${{ matrix.api }}" -eq "python") { start python main.py }
          sleep 10
          curl http://127.0.0.1:8080


  linux-tests:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    strategy:
      matrix:
        api: ["cxx", "cc", "csharp", "python"]  

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Build WebFramework
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=../WebFrameworkLibrary -G "Ninja" ..
          cmake --build . -j
          cmake --install .

    - name: Build samples
      run: |
          cd samples
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -G "Ninja" ..
          cmake --build . -j
          cmake --install .

    - name: Install Python API
      if: ${{ matrix.api == 'python' }}
      run: pip3 install WebFrameworkLibrary/api/python_api/

    - name: Run samples
      working-directory: samples/build/bin
      run: |
          if ["${{ matrix.api }}" -eq "cxx"]; then ./hello_cpp & sleep 1; fi
          if ["${{ matrix.api }}" -eq "cc"]; then ./hello_c & sleep 1; fi
          if ["${{ matrix.api }}" -eq "csharp"]; then ./hello_csharp & sleep 1; fi
          if ["${{ matrix.api }}" -eq "python"]; then python3 main.py & sleep 1; fi
          sleep 10
          curl http://127.0.0.1:8080


  publish:
    runs-on: ubuntu-latest
    needs: [
      windows-visual-studio-build,
      windows-hello-executor,
      linux-hello-executor,
      android-hello-executor,
      windows-build,
      linux-build,
      android-build,
      windows-flutter-build,
      android-flutter-build,
      windows-tests,
      linux-tests
    ]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Get current branch
      uses : LazyPanda07/extract-current-branch@master
    
    - name: Setup release version variable
      shell: pwsh
      run: echo "VERSION=$($($($(Select-String -Path .\WebFramework\src\CAPI\WebFrameworkCAPI.cpp -Pattern version) -split '( = )')[3].TrimEnd(';')).Trim('\"'))" >> $Env:GITHUB_ENV

    - name: Download artifacts
      uses: actions/download-artifact@v4
      
    - name: Move samples
      run: |
          mkdir samples_dir
          
          mkdir samples_dir/windows
          mv Windows/* samples_dir/windows
          
          mkdir samples_dir/windows_flutter
          mv WindowsFlutterSample/* samples_dir/windows_flutter

          mkdir samples_dir/linux
          mv Linux/* samples_dir/linux

          mkdir samples_dir/android_flutter
          mv AndroidFlutterSample/* samples_dir/android_flutter

    - name: Create samples.zip
      working-directory: samples_dir
      run: zip -r ../samples.zip . -i *.*

    - name: Create hello executors zip archives
      run: |
          cd HelloExecutorWindows && zip ../hello_executor_windows.zip *.* && cd ..
          cd HelloExecutorLinux && zip ../hello_executor_linux.zip *.* && cd ..
          cd HelloExecutorAndroid && zip ../hello_executor_android.zip *.* && cd ..
          
    - name: Publish
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      run: gh release create v${{ env.VERSION }} *.zip --title v${{ env.VERSION }} --generate-notes
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
