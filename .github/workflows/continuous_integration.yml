name: "Continuous Integration"


on:
  push:
    branches: [master, dev]
  workflow_dispatch:


env:
  JOM_VERSION: 1_1_4


jobs:
  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
  
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Install JOM
      run: |
        Invoke-WebRequest -Uri "https://download.qt.io/official_releases/jom/jom_${{ env.JOM_VERSION }}.zip" -OutFile jom.zip
        Expand-Archive jom.zip -DestinationPath jom-bin
        echo "${{ github.workspace }}\jom-bin" | Out-File -Append -Encoding ascii $env:GITHUB_PATH
        
    - name: Build
      shell: bash
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=../WebFrameworkLibrary -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -G "NMake Makefiles JOM" ..
          jom -j $(nproc)
          jom install

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Windows
        path: WebFrameworkLibrary


  linux-build:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=../WebFrameworkLibrary -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ..
          make install -j $(nproc)

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Linux
        path: WebFrameworkLibrary


  linux-aarch64-build:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:aarch64
    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=../WebFrameworkLibrary -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DCMAKE_TOOLCHAIN_FILE=../toolchain-aarch64.cmake -DBUILD_CC_API=OFF -DBUILD_CSHARP_API=OFF -DBUILD_PYTHON_API=OFF -DBUILD_FLUTTER_API=OFF ..
          make install -j $(nproc)

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}_LinuxARM
        path: WebFrameworkLibrary


  android-build:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:android
    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=../WebFrameworkLibrary -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ${ANDROID_CMAKE_BUILD_ARGUMENTS} ..
          make install -j $(nproc)

    - name: Move
      working-directory: WebFrameworkLibrary
      run: |
          cd lib
          mkdir arm64-v8a
          mv *.so arm64-v8a
          rm -rf *.a
          rm -rf vendor

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Android
        path: WebFrameworkLibrary
        

  windows-cxx-tests:
    runs-on: windows-latest
    needs: windows-build
    strategy:
      matrix:
        configuration: [Debug, Release]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
  
    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Windows
        path: WebFrameworkLibrary

    - name: Get Google Test
      uses: LazyPanda07/get-gtest@v1
      with:
        build-type: ${{ matrix.configuration }}
        install-path: Tests/gtest

    - name: Install JOM
      run: |
        Invoke-WebRequest -Uri "https://download.qt.io/official_releases/jom/jom_${{ env.JOM_VERSION }}.zip" -OutFile jom.zip
        Expand-Archive jom.zip -DestinationPath jom-bin
        echo "${{ github.workspace }}\jom-bin" | Out-File -Append -Encoding ascii $env:GITHUB_PATH
        
    - name: Build tests
      working-directory: Tests
      shell: bash
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DCXX_API=ON -G "NMake Makefiles JOM" ..
          jom -j $(nproc)
          jom install

    - name: Tests
      working-directory: Tests
      run: |
          cd build/bin
          .\CXX_API.exe || exit 1
          .\run_tests.bat ${{ matrix.config }}

    - name: Upload tests binaries
      if: ${{ matrix.config == 'multi_threaded_config.json' && matrix.configuration == 'Release' }}
      uses: actions/upload-artifact@v4
      with:
        name: Tests_Windows
        path: Tests/build/bin


  # windows-debug-release-tests:
  #   runs-on: windows-latest
  #   needs: windows-build
  #   strategy:
  #     matrix:
  #       config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       submodules: recursive
  
  #   - name: Download artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: Debug_Windows
  #       path: WebFrameworkLibrary

  #   - name: Get Google Test
  #     uses: LazyPanda07/get-gtest@v1
  #     with:
  #       build-type: Release
  #       install-path: Tests/gtest

  #   - name: Enable NMake
  #     uses: ilammy/msvc-dev-cmd@v1.13.0

  #   - name: Build tests
  #     working-directory: Tests
  #     run: |
  #         mkdir build
  #         cd build
  #         cmake -DCMAKE_BUILD_TYPE=Release -DCXX_API=ON -G "NMake Makefiles" ..
  #         nmake install

  #   - name: Tests
  #     working-directory: Tests
  #     run: |
  #         cd build/bin
  #         .\CXX_API.exe || exit 1
  #         .\run_tests.bat ${{ matrix.config }}


  # windows-release-debug-tests:
  #   runs-on: windows-latest
  #   needs: windows-build
  #   strategy:
  #     matrix:
  #       config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       submodules: recursive
  
  #   - name: Download artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: Release_Windows
  #       path: WebFrameworkLibrary

  #   - name: Get Google Test
  #     uses: LazyPanda07/get-gtest@v1
  #     with:
  #       build-type: Debug
  #       install-path: Tests/gtest

  #   - name: Enable NMake
  #     uses: ilammy/msvc-dev-cmd@v1.13.0

  #   - name: Build tests
  #     working-directory: Tests
  #     run: |
  #         mkdir build
  #         cd build
  #         cmake -DCMAKE_BUILD_TYPE=Debug -DCXX_API=ON -G "NMake Makefiles" ..
  #         nmake install

  #   - name: Tests
  #     working-directory: Tests
  #     run: |
  #         cd build/bin
  #         .\CXX_API.exe || exit 1
  #         .\run_tests.bat ${{ matrix.config }}


  linux-cxx-tests:
    runs-on: ubuntu-latest
    needs: linux-build
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    strategy:
      matrix:
        configuration: [Debug, Release]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Linux
        path: WebFrameworkLibrary
        
    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DCXX_API=ON ..
          make install -j $(nproc)

    - name: Tests
      working-directory: Tests
      shell: bash
      run: |
          cd build/bin
          export LD_LIBRARY_PATH=$(pwd):${LD_LIBRARY_PATH}
          ./CXX_API
          source run_tests.sh ${{ matrix.config }}

    - name: Upload tests binaries
      if: ${{ matrix.config == 'multi_threaded_config.json' && matrix.configuration == 'Release' }}
      uses: actions/upload-artifact@v4
      with:
        name: Tests_Linux
        path: Tests/build/bin


  linux-aarch64-cxx-tests:
    runs-on: ubuntu-latest
    needs: linux-aarch64-build
    container:
      image: lazypanda07/ubuntu_cxx20:aarch64
    strategy:
      matrix:
        configuration: [Debug, Release]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}_LinuxARM
        path: WebFrameworkLibrary
        
    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DCXX_API=ON -DCMAKE_TOOLCHAIN_FILE=../../toolchain-aarch64.cmake ..
          make install -j $(nproc)

    - name: Install curl
      run: apt update && apt install -y curl

    - name: Tests
      working-directory: Tests
      shell: bash
      run: |
          cd build/bin
          export LD_LIBRARY_PATH=$(pwd):${LD_LIBRARY_PATH}
          qemu-aarch64 ./CXX_API
          source run_aarch64_tests.sh ${{ matrix.config }}
          

  windows-cc-tests:
    runs-on: windows-latest
    needs: windows-build
    strategy:
      matrix:
        configuration: [Debug, Release]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
  
    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Windows
        path: WebFrameworkLibrary

    - name: Get Google Test
      uses: LazyPanda07/get-gtest@v1
      with:
        build-type: ${{ matrix.configuration }}
        install-path: Tests/gtest

    - name: Install JOM
      run: |
        Invoke-WebRequest -Uri "https://download.qt.io/official_releases/jom/jom_${{ env.JOM_VERSION }}.zip" -OutFile jom.zip
        Expand-Archive jom.zip -DestinationPath jom-bin
        echo "${{ github.workspace }}\jom-bin" | Out-File -Append -Encoding ascii $env:GITHUB_PATH
        
    - name: Build tests
      working-directory: Tests
      shell: bash
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DCXX_API=ON -DCC_API=ON -G "NMake Makefiles JOM" ..
          jom -j $(nproc)
          jom install

    - name: Tests
      working-directory: Tests
      run: |
          cd build/bin
          .\CC_API.exe || exit 1
          .\run_cc_tests.bat ${{ matrix.config }}


  linux-cc-tests:
    runs-on: ubuntu-latest
    needs: linux-build
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    strategy:
      matrix:
        configuration: [Debug, Release]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Linux
        path: WebFrameworkLibrary
        
    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DCXX_API=ON -DCC_API=ON ..
          make install -j $(nproc)

    - name: Tests
      working-directory: Tests
      shell: bash
      run: |
          cd build/bin
          export LD_LIBRARY_PATH=$(pwd):${LD_LIBRARY_PATH}
          ./CC_API
          source run_cc_tests.sh ${{ matrix.config }}
  

  windows-python-tests:
    runs-on: windows-latest
    needs: [windows-cxx-tests]
    strategy:
      matrix:
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
      - name: Install Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: Release_Windows
          path: WebFrameworkLibrary

      - name: Download tests artifacts
        uses: actions/download-artifact@v4
        with:
          name: Tests_Windows
          path: TestsBinaries
        
      - name: Install Python API
        run: |
            python -m pip install pip --upgrade
            pip install setuptools
            pip install setuptools --upgrade
            pip install WebFrameworkLibrary/api/python_api/
        
      - name: Tests
        run: |
          cp WebFrameworkLibrary/dll/WebFramework.dll TestsBinaries
          cd TestsBinaries
          .\run_python_tests.bat ${{ matrix.config }}


  linux-python-tests:
    runs-on: ubuntu-latest
    needs: [linux-cxx-tests]
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    strategy:
      matrix:
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: Release_Linux
          path: WebFrameworkLibrary

      - name: Download tests artifacts
        uses: actions/download-artifact@v4
        with:
          name: Tests_Linux
          path: TestsBinaries
        
      - name: Chmod
        run: |
          cd TestsBinaries
          chmod +x DefaultHTTPSServer
          chmod +x Core
          chmod +x LoadBalancerCore
          chmod +x ProxyCore

      - name: Tests
        shell: bash
        run: |
          pip3 install WebFrameworkLibrary/api/python_api/
          cp WebFrameworkLibrary/lib/libWebFramework.so TestsBinaries
          cd TestsBinaries
          source run_python_tests.sh ${{ matrix.config }}
  

  windows-csharp-tests:
    runs-on: windows-latest
    needs: windows-build
    strategy:
      matrix:
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
  
    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: Release_Windows
        path: WebFrameworkLibrary

    - name: Get Google Test
      uses: LazyPanda07/get-gtest@v1
      with:
        build-type: Release
        install-path: Tests/gtest
        
    - name: Install JOM
      run: |
        Invoke-WebRequest -Uri "https://download.qt.io/official_releases/jom/jom_${{ env.JOM_VERSION }}.zip" -OutFile jom.zip
        Expand-Archive jom.zip -DestinationPath jom-bin
        echo "${{ github.workspace }}\jom-bin" | Out-File -Append -Encoding ascii $env:GITHUB_PATH

    - name: Build tests
      working-directory: Tests
      shell: bash
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCXX_API=ON -DCSHARP_API=ON -G "NMake Makefiles JOM" ..
          jom -j $(nproc)
          jom install

    - name: Tests
      working-directory: Tests
      run: |
          cd build/bin
          dotnet test CSharpAPI.dll
          .\run_csharp_tests.bat ${{ matrix.config }}


  linux-csharp-tests:
    runs-on: ubuntu-latest
    needs: linux-build
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    strategy:
      matrix:
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: Release_Linux
        path: WebFrameworkLibrary
        
    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCXX_API=ON -DCSHARP_API=ON ..
          make install -j $(nproc)

    - name: Tests
      working-directory: Tests
      shell: bash
      run: |
          cd build/bin
          export LD_LIBRARY_PATH=$(pwd):LD_LIBRARY_PATH
          dotnet test CSharpAPI.dll
          source run_csharp_tests.sh ${{ matrix.config }}

          
  publish:
    needs: [
      windows-cxx-tests,
      linux-cxx-tests,
      linux-aarch64-cxx-tests,
      windows-csharp-tests,
      linux-csharp-tests,
      windows-python-tests,
      linux-python-tests,
      windows-cc-tests,
      linux-cc-tests,
      # windows-debug-release-tests,
      # windows-release-debug-tests,
      android-build
    ]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Get current branch
      uses : LazyPanda07/extract-current-branch@master
    
    - name: Setup release version variable
      shell: pwsh
      run: echo "VERSION=$($($($(Select-String -Path .\WebFramework\src\CAPI\WebFrameworkCAPI.cpp -Pattern version) -split '( = )')[3].TrimEnd(';')).Trim('\"'))" >> $Env:GITHUB_ENV

    - name: Download artifacts
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      uses: actions/download-artifact@v4

    - name: Remove Windows tests
      run: rm -rf Tests_Windows
      
    - name: Setup Windows build list
      run: echo "WINDOWS_BUILD_LIST="$(ls | grep Windows)"" >> ${GITHUB_ENV}
      
    - name: Create Windows zip
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      run: zip -r windows.zip ${{ env.WINDOWS_BUILD_LIST }}

    - name: Create Linux zip
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      run: zip -r linux.zip Release_Linux

    - name: Create Android zip
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      run: zip -r android.zip Release_Android

    - name: Publish
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      uses: svenstaro/upload-release-action@2.9.0
      with:
        tag: v${{ env.VERSION }}
        release_name: v${{ env.VERSION }}
        file_glob: true
        file: "*.zip"
