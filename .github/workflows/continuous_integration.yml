name: "Continuous Integration"


on:
  push:
    branches: [master, dev]
  workflow_dispatch:


env:
  WINDOWS_CMAKE_BUILD_PARAMETERS: ""
  WINDOWS_CMAKE_GENERATOR: "Ninja"
  LINUX_CMAKE_GENERATOR: "Ninja"


jobs:
  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
  
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Build
      shell: bash
      run: |
          mkdir build
          cd build
          cmake -DWITH_STACKTRACE=ON -DCMAKE_INSTALL_PREFIX=../WebFrameworkLibrary -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ${{ env.WINDOWS_CMAKE_BUILD_PARAMETERS }} -G ${{ env.WINDOWS_CMAKE_GENERATOR }} ..
          cmake --build  . --config ${{ matrix.configuration }} -j && cmake --install . --config ${{ matrix.configuration }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Windows
        path: WebFrameworkLibrary


  linux-build:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build
      run: |
          mkdir build
          cd build
          cmake -DWITH_STACKTRACE=ON -DCMAKE_INSTALL_PREFIX=../WebFrameworkLibrary -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -G ${{ env.LINUX_CMAKE_GENERATOR }} ..
          cmake --build . --config ${{ matrix.configuration }} -j && cmake --install . --config ${{ matrix.configuration }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Linux
        path: WebFrameworkLibrary


  linux-aarch64-build:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:aarch64
    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=../WebFrameworkLibrary -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DCMAKE_TOOLCHAIN_FILE=../toolchain-aarch64.cmake -DBUILD_CSHARP_API=OFF -DBUILD_PYTHON_API=OFF -DBUILD_FLUTTER_API=OFF -G ${{ env.LINUX_CMAKE_GENERATOR }} ..
          cmake --build . --config ${{ matrix.configuration }} -j && cmake --install . --config ${{ matrix.configuration }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}_LinuxARM
        path: WebFrameworkLibrary


  android-build:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:android
    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_INSTALL_PREFIX=../WebFrameworkLibrary -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ${ANDROID_CMAKE_BUILD_ARGUMENTS} -G ${{ env.LINUX_CMAKE_GENERATOR }} ..
          cmake --build . --config ${{ matrix.configuration }} -j && cmake --install . --config ${{ matrix.configuration }}

    - name: Move
      working-directory: WebFrameworkLibrary
      run: |
          cd lib
          mkdir arm64-v8a
          mv *.so arm64-v8a
          rm -rf *.a
          rm -rf vendor

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Android
        path: WebFrameworkLibrary
        

  windows-executors-build:
    runs-on: windows-latest
    needs: windows-build
    strategy:
      matrix:
        configuration: [Debug, Release]
        executors: [CXX, CC]

    steps:
    - uses: actions/checkout@v4
    
    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Download WebFramework
      uses: actions/download-artifact@v4
      with:
        name: Release_Windows
        path: WebFrameworkLibrary

    - name: Build ${{ matrix.executors }} ${{ matrix.configuration }} Executors
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DBUILD_TESTS=OFF -DBUILD_EXECUTORS=${{ matrix.executors }} -G ${{ env.WINDOWS_CMAKE_GENERATOR }} ..
          cmake --build . --config ${{ matrix.configuration }} -j && cmake --install . --config ${{ matrix.configuration }}

    - name: Upload executors
      uses: actions/upload-artifact@v4
      with:
        name: WindowsExecutors-${{ matrix.executors }}-${{ matrix.configuration }}
        path: Tests/build/bin


  linux-executors-build:
    runs-on: ubuntu-latest
    needs: linux-build
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    strategy:
      matrix:
        configuration: [Debug, Release]
        executors: [CXX, CC]

    steps:
    - uses: actions/checkout@v4
      
    - name: Download WebFramework
      uses: actions/download-artifact@v4
      with:
        name: Release_Linux
        path: WebFrameworkLibrary

    - name: Build ${{ matrix.executors }} ${{ matrix.configuration }} Executors
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DBUILD_TESTS=OFF -DBUILD_EXECUTORS=${{ matrix.executors }} -G ${{ env.LINUX_CMAKE_GENERATOR }} ..
          cmake --build . --config ${{ matrix.configuration }} -j && cmake --install . --config ${{ matrix.configuration }}

    - name: Upload executors
      uses: actions/upload-artifact@v4
      with:
        name: LinuxExecutors-${{ matrix.executors }}-${{ matrix.configuration }}
        path: Tests/build/bin


  windows-tests-build:
    runs-on: windows-latest
    needs: windows-build

    steps:
    - uses: actions/checkout@v4
    
    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Get Google Test
      uses: LazyPanda07/get-gtest@master
      with:
        build-type: Release
        install-path: Tests/gtest

    - name: Download WebFramework
      uses: actions/download-artifact@v4
      with:
        name: Release_Windows
        path: WebFrameworkLibrary

    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DBUILD_EXECUTORS=NONE -DCXX_API=ON -DCC_API=ON -DCSHARP_API=ON -G ${{ env.WINDOWS_CMAKE_GENERATOR }} ..
          cmake --build . --config Release -j && cmake --install . --config Release

    - name: Upload tests
      uses: actions/upload-artifact@v4
      with:
        name: WindowsTests
        path: Tests/build/bin


  linux-tests-build:
    runs-on: ubuntu-latest
    needs: linux-build
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Download WebFramework
      uses: actions/download-artifact@v4
      with:
        name: Release_Linux
        path: WebFrameworkLibrary

    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DBUILD_EXECUTORS=NONE -DCXX_API=ON -DCC_API=ON -DCSHARP_API=ON -G ${{ env.LINUX_CMAKE_GENERATOR }} ..
          cmake --build . --config Release -j && cmake --install . --config Release

    - name: Upload executors
      uses: actions/upload-artifact@v4
      with:
        name: LinuxTests
        path: Tests/build/bin


  linux-tests:
    runs-on: ubuntu-latest
    needs: [linux-tests-build, linux-executors-build]
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    strategy:
      matrix:
        configuration: [Debug, Release]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]
        api_test: [run_tests.sh, run_cc_tests.sh, run_csharp_tests.sh, run_python_tests.sh]
        executors: [CXX, CC]

    steps:
    - name: Download WebFramework
      uses: actions/download-artifact@v4
      with:
        name: Release_Linux
        path: WebFrameworkLibrary

    - name: Download Tests
      uses: actions/download-artifact@v4
      with:
        name: LinuxTests
        path: Tests

    - name: Download ${{ matrix.configuration }} ${{ matrix.executors }} Executors
      uses: actions/download-artifact@v4
      with:
        name: LinuxExecutors-${{ matrix.executors }}-${{ matrix.configuration }}
        path: Executors

    - name: Install Python API
      if: ${{ matrix.api_test == 'run_python_tests.sh' }}
      run: pip3 install WebFrameworkLibrary/api/python_api/

    - name: Run ${{ matrix.api_test }} ${{ matrix.configuration }} ${{ matrix.executors }} Tests
      shell: bash
      run: |
          mv Executors/* Tests
          mv WebFrameworkLibrary/lib/* Tests
          cd Tests
          source ${{ matrix.api_test }} ${{ matrix.config }}
          

  windows-tests:
    runs-on: windows-latest
    needs: [windows-tests-build, windows-executors-build]
    strategy:
      matrix:
        configuration: [Debug, Release]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]
        # api_test: [run_tests.bat, run_cc_tests.bat, run_csharp_tests.bat, run_python_tests.bat]
        api_test: [run_tests.bat]
        executors: [CXX, CC]

    steps:
    - name: Download WebFramework
      uses: actions/download-artifact@v4
      with:
        name: Release_Windows
        path: WebFrameworkLibrary

    - name: Download Tests
      uses: actions/download-artifact@v4
      with:
        name: WindowsTests
        path: Tests

    - name: Download ${{ matrix.configuration }} ${{ matrix.executors }} Executors
      uses: actions/download-artifact@v4
      with:
        name: WindowsExecutors-${{ matrix.executors }}-${{ matrix.configuration }}
        path: Executors

    - name: Install Python API
      if: ${{ matrix.api_test == 'run_python_tests.bat' }}
      run: pip install WebFrameworkLibrary/api/python_api/

    - name: Merge artifacts
      shell: bash
      run: |
          mv Executors/* Tests
          mv WebFrameworkLibrary/lib/* Tests

    - name: Run ${{ matrix.api_test }} ${{ matrix.configuration }} ${{ matrix.executors }} Tests
      working-directory: Tests
      run: .\${{ matrix.api_test }} ${{ matrix.config }}
          

  linux-aarch64-cxx-tests:
    runs-on: ubuntu-latest
    needs: linux-aarch64-build
    container:
      image: lazypanda07/ubuntu_cxx20:aarch64
    strategy:
      matrix:
        configuration: [Debug, Release]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}_LinuxARM
        path: WebFrameworkLibrary
        
    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DCXX_API=ON -DCMAKE_TOOLCHAIN_FILE=../../toolchain-aarch64.cmake -DBUILD_EXECUTORS=CXX -G ${{ env.LINUX_CMAKE_GENERATOR }} ..
          cmake --build . --config ${{ matrix.configuration }} -j && cmake --install . --config ${{ matrix.configuration }}

    - name: Install curl
      run: apt update && apt install -y curl

    - name: Tests
      working-directory: Tests
      shell: bash
      run: |
          cd build/bin
          source run_aarch64_cxx_tests.sh ${{ matrix.config }}
          
          
  linux-aarch64-cc-tests:
    runs-on: ubuntu-latest
    needs: linux-aarch64-build
    container:
      image: lazypanda07/ubuntu_cxx20:aarch64
    strategy:
      matrix:
        configuration: [Debug, Release]
        config: [multi_threaded_config.json, thread_pool_config.json, multi_threaded_config_https.json, thread_pool_config_https.json]

    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}_LinuxARM
        path: WebFrameworkLibrary
        
    - name: Build tests
      working-directory: Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DCXX_API=ON -DCC_API=ON -DCMAKE_TOOLCHAIN_FILE=../../toolchain-aarch64.cmake -DBUILD_EXECUTORS=CXX -G ${{ env.LINUX_CMAKE_GENERATOR }} ..
          cmake --build . --config ${{ matrix.configuration }} -j && cmake --install . --config ${{ matrix.configuration }}

    - name: Install curl
      run: apt update && apt install -y curl

    - name: Tests
      working-directory: Tests
      shell: bash
      run: |
          cd build/bin
          source run_aarch64_cc_tests.sh ${{ matrix.config }}
          

  # publish:
  #   needs: [
  #     windows-cxx-tests,
  #     linux-cxx-tests,
  #     linux-aarch64-cxx-tests,
  #     linux-aarch64-cc-tests,
  #     windows-csharp-tests,
  #     linux-csharp-tests,
  #     windows-python-tests,
  #     linux-python-tests,
  #     windows-cc-tests,
  #     linux-cc-tests,
  #     windows-debug-release-tests,
  #     windows-release-debug-tests,
  #     android-build
  #   ]
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       submodules: recursive

  #   - name: Get current branch
  #     uses : LazyPanda07/extract-current-branch@master
    
  #   - name: Setup release version variable
  #     shell: pwsh
  #     run: echo "VERSION=$($($($(Select-String -Path .\WebFramework\src\CAPI\WebFrameworkCAPI.cpp -Pattern version) -split '( = )')[3].TrimEnd(';')).Trim('\"'))" >> $Env:GITHUB_ENV

  #   - name: Download artifacts
  #     if: ${{ env.CURRENT_BRANCH == 'master' }}
  #     uses: actions/download-artifact@v4

  #   - name: Remove Windows tests
  #     run: rm -rf Tests_Windows
      
  #   - name: Setup Windows build list
  #     run: echo "WINDOWS_BUILD_LIST="$(ls | grep Windows)"" >> ${GITHUB_ENV}
      
  #   - name: Create Windows zip
  #     if: ${{ env.CURRENT_BRANCH == 'master' }}
  #     run: zip -r windows.zip ${{ env.WINDOWS_BUILD_LIST }}

  #   - name: Create Linux zip
  #     if: ${{ env.CURRENT_BRANCH == 'master' }}
  #     run: zip -r linux.zip Release_Linux

  #   - name: Create Android zip
  #     if: ${{ env.CURRENT_BRANCH == 'master' }}
  #     run: zip -r android.zip Release_Android

  #   - name: Publish
  #     if: ${{ env.CURRENT_BRANCH == 'master' }}
  #     uses: svenstaro/upload-release-action@2.9.0
  #     with:
  #       tag: v${{ env.VERSION }}
  #       release_name: v${{ env.VERSION }}
  #       file_glob: true
  #       file: "*.zip"
